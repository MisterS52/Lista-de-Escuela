package Interfas;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import com.mycompany.escuela.EscuelaDAO;
import com.mycompany.escuela.GrupoDAO;
import com.mycompany.escuela.AlumnoDAO;
import com.mycompany.escuela.ActividadDAO;
import java.util.ArrayList;
import java.util.Scanner;
/**
 *
 * @author JOVANNI SG
 */

public class Clase extends javax.swing.JFrame {

    /**
     * Creates new form Clase
     */
    
    private InicideClase pantallaPrincipale; // Referencia a la pantalla principal
    private EscuelaDAO escuelaDAO; 
    private GrupoDAO grupoDAO;
    private AlumnoDAO alumnoDAO;
    public Clase(InicideClase pantallas, EscuelaDAO escuelaDAO, GrupoDAO grupoDAO, AlumnoDAO alumnoDAO, String grupoSeleccionado) {
         this.pantallaPrincipale = pantallas; // Se pasa la referencia a Pantalla principal
         this.escuelaDAO = escuelaDAO;
         this.grupoDAO = grupoDAO;
         this.alumnoDAO = alumnoDAO; // Inicializamos alumnoDAO
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // o HIDE_ON_CLOSE según lo que necesites
        setTitle("Clase");
        Grupo.setText(grupoSeleccionado); // Muestra el grupo seleccionado en el campo de texto
        cargarAlumnosPorGrupo();
    }
    private void cargarAlumnosPorGrupo() {
         int idGrupo = obtenerIdGrupo();
    try {
        System.out.println("Cargando alumnos para el grupo con ID: " + idGrupo);
        
        // Obtener los detalles de los alumnos para el grupo seleccionado
        List<String> detallesAlumnos = alumnoDAO.obtenerDetallesAlumnosPorGrupo(idGrupo);
        
        System.out.println("Alumnos obtenidos: " + detallesAlumnos);

        // Crear un modelo para la lista de alumnos
        DefaultListModel<String> model = new DefaultListModel<>();

        // Agregar cada detalle de alumno al modelo
        for (String detalle : detallesAlumnos) {
            model.addElement(detalle); // Añadir el detalle a la lista
        }

        // Asignar el modelo a la JList
        ListadeAlumnos.setModel(model);
        System.out.println("Modelo actualizado con " + model.getSize() + " alumnos.");

    } catch (SQLException e) {
        e.printStackTrace(); // Mostrar detalles del error en la consola
        JOptionPane.showMessageDialog(this, "Error al cargar los alumnos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListadeAlumnos = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        Grupo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        AgregarAlu = new javax.swing.JButton();
        EliminarAlu = new javax.swing.JButton();
        Lista = new javax.swing.JButton();
        Actividades = new javax.swing.JButton();
        ListasAnteriores = new javax.swing.JButton();
        CalificarActividades = new javax.swing.JButton();
        Actualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 153, 0));
        jPanel2.setForeground(new java.awt.Color(0, 153, 0));

        jLabel1.setFont(new java.awt.Font("Footlight MT Light", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Un Nuevo dia en Clase ");

        ListadeAlumnos.setBackground(new java.awt.Color(0, 204, 51));
        ListadeAlumnos.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        ListadeAlumnos.setForeground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(ListadeAlumnos);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Alumnos:");

        Grupo.setBackground(new java.awt.Color(0, 153, 0));
        Grupo.setForeground(new java.awt.Color(0, 0, 0));
        Grupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrupoActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Grupo:");

        AgregarAlu.setForeground(new java.awt.Color(0, 0, 0));
        AgregarAlu.setText("AgrearAlumno");
        AgregarAlu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarAluActionPerformed(evt);
            }
        });

        EliminarAlu.setForeground(new java.awt.Color(0, 0, 0));
        EliminarAlu.setText("EliminarAlumno");
        EliminarAlu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarAluActionPerformed(evt);
            }
        });

        Lista.setForeground(new java.awt.Color(0, 0, 0));
        Lista.setText("NombrarLista ");
        Lista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListaActionPerformed(evt);
            }
        });

        Actividades.setForeground(new java.awt.Color(0, 0, 0));
        Actividades.setText("N.Actividades");
        Actividades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActividadesActionPerformed(evt);
            }
        });

        ListasAnteriores.setForeground(new java.awt.Color(0, 0, 0));
        ListasAnteriores.setText("ListaAnteriores");
        ListasAnteriores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListasAnterioresActionPerformed(evt);
            }
        });

        CalificarActividades.setForeground(new java.awt.Color(0, 0, 0));
        CalificarActividades.setText("CalificarActividades");
        CalificarActividades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalificarActividadesActionPerformed(evt);
            }
        });

        Actualizar.setForeground(new java.awt.Color(0, 0, 0));
        Actualizar.setText("Actualizar");
        Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(EliminarAlu))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 218, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(86, 86, 86))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Grupo, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(Actualizar)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Lista, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Actividades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ListasAnteriores, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(AgregarAlu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CalificarActividades))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Grupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(Actualizar)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(EliminarAlu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AgregarAlu)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(Lista)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ListasAnteriores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Actividades)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CalificarActividades)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrupoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GrupoActionPerformed

    private void EliminarAluActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarAluActionPerformed
        // TODO add your handling code here:
         try {
        // Solicitar el ID del alumno a eliminar
        String input = JOptionPane.showInputDialog(this, 
            "Ingresa el ID del alumno a eliminar:", 
            "Eliminar Alumno", 
            JOptionPane.QUESTION_MESSAGE);

        // Verificar que el usuario ingresó un valor
        if (input != null && !input.trim().isEmpty()) {
            int idAlumno = Integer.parseInt(input.trim()); // Convertir el valor ingresado a entero
            
            // Llamar al método para eliminar el alumno
            boolean eliminado = alumnoDAO.eliminarAlumnoPorId(idAlumno);

            // Mostrar mensajes según el resultado
            if (eliminado) {
                JOptionPane.showMessageDialog(this, 
                    "Alumno eliminado correctamente.", 
                    "Éxito", 
                    JOptionPane.INFORMATION_MESSAGE);

                // Actualizar la lista de alumnos después de la eliminación
                cargarAlumnosPorGrupo();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "No se encontró un alumno con el ID proporcionado.", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (NumberFormatException e) {
        // Mostrar un mensaje de error si el ID no es un número válido
        JOptionPane.showMessageDialog(this, 
            "El ID del alumno debe ser un número válido.", 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    } catch (SQLException e) {
        // Manejar errores de base de datos
        JOptionPane.showMessageDialog(this, 
            "Error al eliminar el alumno: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_EliminarAluActionPerformed

    private void AgregarAluActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarAluActionPerformed
       // Obtener el ID del grupo desde la función obtenerIdGrupo
    int idGrupo = obtenerIdGrupo();
    
    // Verificar si el ID es válido
    if (idGrupo == -1) {
        // Si el ID no es válido, salir
        return;
    }

    try {
        // Crear una instancia de la ventana NuevoAlumno y pasarle el ID del grupo
        NuevoAlumno ventanaNuevoAlumno = new NuevoAlumno(idGrupo, this);

        // Configurar la ventana y mostrarla
        ventanaNuevoAlumno.setVisible(true);
        ventanaNuevoAlumno.setLocationRelativeTo(null); // Centrar la nueva ventana
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al abrir la ventana: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_AgregarAluActionPerformed

    private void ListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListaActionPerformed
        // TODO add your handling code here:
          // Obtener idGrupo
    int idGrupo = obtenerIdGrupo();

    // Obtener la lista de ids de los alumnos
    List<Integer> idsAlumnos = obtenerIdsDeListaAlumnos();

    if (idsAlumnos.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No hay alumnos en la lista.", "Información", JOptionPane.INFORMATION_MESSAGE);
        return; // Detenemos el flujo si no hay alumnos
    }

    // Crear y abrir la ventana Asistencia
    Asistencia ventanaAsistencia = new Asistencia(idGrupo, idsAlumnos);
    ventanaAsistencia.setVisible(true);
    ventanaAsistencia.setLocationRelativeTo(this);
        
        
    }//GEN-LAST:event_ListaActionPerformed

    private void ActividadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActividadesActionPerformed
        // TODO add your handling code here:
         int idGrupo = obtenerIdGrupo();
    // Solicitar el nombre de la actividad al usuario
    String nombreActividad = JOptionPane.showInputDialog(this, 
            "Ingrese el nombre de la nueva actividad:", 
            "Nueva Actividad", 
            JOptionPane.PLAIN_MESSAGE);
    
    // Validar si el usuario ingresó algo o canceló
    if (nombreActividad != null && !nombreActividad.trim().isEmpty()) {
        try {
            // Llamar al método para agregar la actividad
            ActividadDAO actividadDAO = new ActividadDAO();
            actividadDAO.agregarActividad(idGrupo, nombreActividad.trim());
            JOptionPane.showMessageDialog(this, "Actividad registrada exitosamente.", 
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al registrar la actividad: " + e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "El nombre de la actividad no puede estar vacío.", 
                "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_ActividadesActionPerformed

    private void ListasAnterioresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListasAnterioresActionPerformed
        // TODO add your handling code here:
         int idGrupoSeleccionado = obtenerIdGrupo(); // Implementa este método según tu lógica.
    HistorialDeAsistencias historial = new HistorialDeAsistencias(idGrupoSeleccionado,this);
    historial.setVisible(true);
    }//GEN-LAST:event_ListasAnterioresActionPerformed

    private void ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActualizarActionPerformed
        // TODO add your handling code here:
        // Actualizar la lista de alumnos 
                cargarAlumnosPorGrupo();
    }//GEN-LAST:event_ActualizarActionPerformed

    private void CalificarActividadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalificarActividadesActionPerformed
        // TODO add your handling code here:
         int idGrupo = obtenerIdGrupo(); // Implementa según tu lógica
    if (idGrupo > 0) {
        Clalificar ventanaCalificar = new Clalificar(idGrupo);
        ventanaCalificar.setVisible(true);
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un grupo primero.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_CalificarActividadesActionPerformed
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private int obtenerIdGrupo() {
String textoGrupo = Grupo.getText().trim();
    try {
        // Buscar la posición de "ID:" y extraer el número después de él
        int startIndex = textoGrupo.indexOf("ID:") + 4; // Después de "ID: "
        int endIndex = textoGrupo.indexOf("|", startIndex); // Hasta el primer "|"

        if (startIndex == -1 || endIndex == -1) {
            throw new IllegalArgumentException("Formato de ID inválido");
        }

        // Extraer el número de ID
        String idGrupoStr = textoGrupo.substring(startIndex, endIndex).trim();
        return Integer.parseInt(idGrupoStr); // Convertir el ID a entero
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El formato del grupo es inválido. Asegúrate de incluir un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return -1; // Valor de error si no se puede extraer el ID
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(this, "El formato del grupo es inválido. Asegúrate de que se incluya el ID correctamente.", "Error", JOptionPane.ERROR_MESSAGE);
        return -1; // Valor de error si el formato no es correcto
    }
    
}
private List<Integer> obtenerIdsDeListaAlumnos() {
    List<Integer> ids = new ArrayList<>();

    // Recorremos cada elemento en la lista ListadeAlumnos
    for (int i = 0; i < ListadeAlumnos.getModel().getSize(); i++) {
        String elemento = ListadeAlumnos.getModel().getElementAt(i);

        // Buscar el prefijo "ID: " y extraer el número que lo sigue
        if (elemento.startsWith("ID: ")) {
            try {
                // Extraer la parte después de "ID: " hasta el primer espacio
                String idString = elemento.substring(4, elemento.indexOf("|")).trim();
                int id = Integer.parseInt(idString);
                ids.add(id); // Agregar el ID a la lista
            } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
                // Manejar errores en caso de que el formato no sea válido
                System.err.println("Error al procesar el elemento: " + elemento);
            }
        }
    }

    return ids;
}



   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Actividades;
    private javax.swing.JButton Actualizar;
    private javax.swing.JButton AgregarAlu;
    private javax.swing.JButton CalificarActividades;
    private javax.swing.JButton EliminarAlu;
    private javax.swing.JTextField Grupo;
    private javax.swing.JButton Lista;
    private javax.swing.JList<String> ListadeAlumnos;
    private javax.swing.JButton ListasAnteriores;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
